syntax = "proto3";

package protocol;


enum RequestType {
  // System operations (0-9)
  CHECK_ALIVE = 0;
  TERMINATE = 9;

  // Playback controls (10-19)
  PLAY = 10;
  PAUSE = 11;
  STOP = 12;
  NEXT = 13;
  PREV = 14;

  // Player settings (20-29)
  SET_REPEAT = 20; // require `RepeatState` field
  GET_REPEAT = 21; // return `OK` with `RepeatState` field
  SET_VOLUME = 22; // require `data` field, 0 <= value <= 1
  GET_VOLUME = 23; // return `OK` with `data` field
  TOGGLE_SHUFFLE = 24;
  GET_STATUS = 25; // return `PLAYER_STATUS` with `data` field

  // Queue management (30-39)
  ADD_TRACK = 30; // require `TrackData` field
  REMOVE_TRACK = 31; // require `data` field
  CLEAR_QUEUE = 32;

  ADD_TRACK_FROM_CONFIG = 34; // require `TrackConfig` field

  // Provider management (40-49)
  NEW_PROVIDER = 40; // require `ProviderConfig` field
  REMOVE_PROVIDER = 41; // require `data` field
  PROVIDER_LIST = 42; // return `PROVIDERS` with `ProviderList` field
  PROVIDER_SEARCH = 43; // require `TrackSearch` field, return `SearchResults` field
  PROVIDER_SEARCH_ALL = 44; // require `TrackSearch` field, return `SearchResults` field

  reserved 50 to 113;
  reserved 115 to max;
  SECRET_CODE = 114;
}

message TrackData {
  string provider = 1;
  string id = 2;
}

message TrackConfig {
  string provider = 1;
  map<string, string> config = 2;
}

enum RepeatState {
    Queue = 0;
    Track = 1;
    None = 2;
}

message ProviderConfig {
  map<string, string> config = 1;
}

message TrackSearch {
  repeated string providers = 1;
  string query = 2;
}

message ProviderSearchResult {
  map<string, string> values = 1;
}

message SearchResults {
  map<string, ProviderSearchResult> results = 1;
}


enum ResponseType {
  // System responses (0-9)
  IM_ALIVE = 0;
  OK = 1;
  ERROR = 2;

  // Data responses (10-19)
  TRACK_DATA = 10;
  SEARCH_RESULT = 11;
  PROVIDERS = 12;
  PLAYER_STATUS = 13;

  reserved 14 to 113;
  reserved 115 to max;
  HI_IM_YAJYU_SENPAI = 114;
}

message ProviderList {
  repeated string providers = 1;
}

message Request {
  RequestType type = 1;
  oneof payload {
    string data = 2;
    ProviderConfig provider_config = 3;
    TrackData track = 4;
    TrackSearch track_search = 5;
    TrackConfig track_config = 6;
    RepeatState repeat_state = 7;
  }
}

message Response {
  ResponseType type = 1;
  oneof payload {
    string data = 2;
    string error = 3;
    SearchResults search_results = 4;
    ProviderList provider_list = 5;
    RepeatState repeat_state = 6;
  }
}